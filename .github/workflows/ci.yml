name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Unit & Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ["1.21", "1.22", "1.23", "1.24.9"]
      fail-fast: false

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🧪 Run tests with coverage
        run: |
          set -euo pipefail

          echo "Running tests with coverage..."
          go test -v -race -coverpkg=./... -covermode=atomic -coverprofile=coverage.out ./...

          echo "Test coverage summary:"
          go tool cover -func=coverage.out | grep total

          # Optional: fail CI if coverage drops below a threshold
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          MIN_COVERAGE=20
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below minimum $MIN_COVERAGE%"
            exit 1
          fi

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: unittests
          name: codecov-${{ matrix.os }}-${{ matrix.go }}
          fail_ci_if_error: true

  lint:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.9"
          cache: true

      - name: 🧹 Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=10m --out-format=colored-line-number
          install-mode: source

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run gosec
        uses: securego/gosec@master
        with:
          args: ./...
      - name: 📄 Upload gosec report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gosec-report
          path: gosec.json
          if-no-files-found: ignore

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.9"
          cache: true

      - name: ⚡ Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt

      - name: 📈 Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt
